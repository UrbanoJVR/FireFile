/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package archivos.aleatorios;

import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Urbano
 */
public class Run extends javax.swing.JFrame {

    String directorioBase;
    File carpeta;
    File[] listaArchivos; //Solo contine los archivos del directorio padre
    ArrayList<Renowned> recuperacion;

    /**
     * Creates new form Run
     */
    public Run() {
        initComponents();
    }

    String getExtension(String txt) {
        String extension = null;
        int i = txt.lastIndexOf(".");
        if (i > 0) {
            extension = txt.substring(i + 1);
        }
        return extension;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        encontradosTxt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        historialTxt = new javax.swing.JTextArea();
        buscarDirectorioButon = new javax.swing.JButton();
        directorioLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        archivosYCarpetasCheckBox = new javax.swing.JCheckBox();
        soloArchivosCheckBox = new javax.swing.JCheckBox();
        soloCarpetasCheckBox = new javax.swing.JCheckBox();
        recursivoCheckBox = new javax.swing.JCheckBox();
        generarArchivoRecuperacionCheckBox = new javax.swing.JCheckBox();
        directorioRecuperacionTxt = new javax.swing.JTextField();
        buscarRecuperacionButon = new javax.swing.JButton();
        filtrarExtensionCheckBox = new javax.swing.JCheckBox();
        filtroExtensionTxt = new javax.swing.JTextField();
        falsosAleatoriosCheckBox = new javax.swing.JCheckBox();
        cantidadAleatoriosLabel = new javax.swing.JLabel();
        soloPrincipalAleatoriosCheckBox = new javax.swing.JCheckBox();
        enTodosDirectoriosCheckBox = new javax.swing.JCheckBox();
        extensionAleatoriosLabel = new javax.swing.JLabel();
        extensionAleatoriosTxt = new javax.swing.JTextField();
        mantenerExtensionesCheck = new javax.swing.JCheckBox();
        cambiarExtensionACheck = new javax.swing.JCheckBox();
        extensionElegidaTxt = new javax.swing.JTextField();
        recuperacionIgualQueOrigenButon = new javax.swing.JButton();
        nombreRecuperacionLabel = new javax.swing.JLabel();
        nombreRecuepracionTxt = new javax.swing.JTextField();
        extensinoRecuperacionLabel = new javax.swing.JLabel();
        cantidadAleatoriosSpinner = new javax.swing.JSpinner();
        runButon = new javax.swing.JButton();
        runButon1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        reloadFilesButon = new javax.swing.JButton();
        resetButon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        encontradosTxt.setEditable(false);
        encontradosTxt.setBackground(new java.awt.Color(0, 0, 0));
        encontradosTxt.setColumns(20);
        encontradosTxt.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        encontradosTxt.setForeground(new java.awt.Color(255, 255, 255));
        encontradosTxt.setRows(5);
        jScrollPane1.setViewportView(encontradosTxt);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Archivos y carpetas");

        historialTxt.setEditable(false);
        historialTxt.setBackground(new java.awt.Color(0, 0, 204));
        historialTxt.setColumns(20);
        historialTxt.setForeground(new java.awt.Color(255, 255, 0));
        historialTxt.setRows(5);
        jScrollPane2.setViewportView(historialTxt);

        buscarDirectorioButon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FileBrowser.png"))); // NOI18N
        buscarDirectorioButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarDirectorioButonActionPerformed(evt);
            }
        });

        directorioLabel.setText("No hay directorio seleccionado");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        buttonGroup1.add(archivosYCarpetasCheckBox);
        archivosYCarpetasCheckBox.setText("Renombrar archivos y carpetas");

        buttonGroup1.add(soloArchivosCheckBox);
        soloArchivosCheckBox.setSelected(true);
        soloArchivosCheckBox.setText("Renombrar solo archivos");

        buttonGroup1.add(soloCarpetasCheckBox);
        soloCarpetasCheckBox.setText("Renombrar solo carpetas");

        recursivoCheckBox.setText("Recursivo");
        recursivoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recursivoCheckBoxActionPerformed(evt);
            }
        });

        generarArchivoRecuperacionCheckBox.setText("Generar archivo de recuperación en");
        generarArchivoRecuperacionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarArchivoRecuperacionCheckBoxActionPerformed(evt);
            }
        });

        directorioRecuperacionTxt.setText("Directorio");
        directorioRecuperacionTxt.setEnabled(false);

        buscarRecuperacionButon.setText("...");
        buscarRecuperacionButon.setEnabled(false);
        buscarRecuperacionButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarRecuperacionButonActionPerformed(evt);
            }
        });

        filtrarExtensionCheckBox.setText("Renombrar solo esta extension");
        filtrarExtensionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarExtensionCheckBoxActionPerformed(evt);
            }
        });

        filtroExtensionTxt.setText("pdf");
        filtroExtensionTxt.setEnabled(false);

        falsosAleatoriosCheckBox.setText("Generar falsos aleatorios");
        falsosAleatoriosCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                falsosAleatoriosCheckBoxActionPerformed(evt);
            }
        });

        cantidadAleatoriosLabel.setText("Cantidad:");
        cantidadAleatoriosLabel.setEnabled(false);

        buttonGroup2.add(soloPrincipalAleatoriosCheckBox);
        soloPrincipalAleatoriosCheckBox.setSelected(true);
        soloPrincipalAleatoriosCheckBox.setText("Solo en directorio principal");
        soloPrincipalAleatoriosCheckBox.setEnabled(false);

        buttonGroup2.add(enTodosDirectoriosCheckBox);
        enTodosDirectoriosCheckBox.setText("Por cada directorio");
        enTodosDirectoriosCheckBox.setEnabled(false);

        extensionAleatoriosLabel.setText("Extensión:");
        extensionAleatoriosLabel.setEnabled(false);

        extensionAleatoriosTxt.setText("txt");
        extensionAleatoriosTxt.setEnabled(false);

        buttonGroup3.add(mantenerExtensionesCheck);
        mantenerExtensionesCheck.setSelected(true);
        mantenerExtensionesCheck.setText("Mantener las mismas extensiones");
        mantenerExtensionesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mantenerExtensionesCheckActionPerformed(evt);
            }
        });

        buttonGroup3.add(cambiarExtensionACheck);
        cambiarExtensionACheck.setText("Cambiar extensiones a:");
        cambiarExtensionACheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarExtensionACheckActionPerformed(evt);
            }
        });

        extensionElegidaTxt.setText("pdf");
        extensionElegidaTxt.setEnabled(false);

        recuperacionIgualQueOrigenButon.setText("<-");
        recuperacionIgualQueOrigenButon.setEnabled(false);
        recuperacionIgualQueOrigenButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recuperacionIgualQueOrigenButonActionPerformed(evt);
            }
        });

        nombreRecuperacionLabel.setText("Nombre:");
        nombreRecuperacionLabel.setEnabled(false);

        nombreRecuepracionTxt.setText("recoveryFF");
        nombreRecuepracionTxt.setEnabled(false);

        extensinoRecuperacionLabel.setText(".rff");
        extensinoRecuperacionLabel.setEnabled(false);

        cantidadAleatoriosSpinner.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generarArchivoRecuperacionCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(archivosYCarpetasCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(soloArchivosCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(soloCarpetasCheckBox))
                    .addComponent(recursivoCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(filtrarExtensionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtroExtensionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(falsosAleatoriosCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(soloPrincipalAleatoriosCheckBox)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(cantidadAleatoriosLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cantidadAleatoriosSpinner)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enTodosDirectoriosCheckBox)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(extensionAleatoriosLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(extensionAleatoriosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(mantenerExtensionesCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cambiarExtensionACheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(extensionElegidaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nombreRecuperacionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombreRecuepracionTxt))
                            .addComponent(directorioRecuperacionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(recuperacionIgualQueOrigenButon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscarRecuperacionButon))
                            .addComponent(extensinoRecuperacionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(archivosYCarpetasCheckBox)
                    .addComponent(soloArchivosCheckBox)
                    .addComponent(soloCarpetasCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recursivoCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mantenerExtensionesCheck)
                    .addComponent(cambiarExtensionACheck)
                    .addComponent(extensionElegidaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generarArchivoRecuperacionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(directorioRecuperacionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recuperacionIgualQueOrigenButon)
                    .addComponent(buscarRecuperacionButon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreRecuperacionLabel)
                    .addComponent(nombreRecuepracionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extensinoRecuperacionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filtroExtensionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filtrarExtensionCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(falsosAleatoriosCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantidadAleatoriosLabel)
                    .addComponent(extensionAleatoriosLabel)
                    .addComponent(extensionAleatoriosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidadAleatoriosSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(soloPrincipalAleatoriosCheckBox)
                    .addComponent(enTodosDirectoriosCheckBox)))
        );

        runButon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Fire.png"))); // NOI18N
        runButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButonActionPerformed(evt);
            }
        });

        runButon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loadFile.png"))); // NOI18N
        runButon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButon1ActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        reloadFilesButon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reload.png"))); // NOI18N
        reloadFilesButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadFilesButonActionPerformed(evt);
            }
        });

        resetButon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        resetButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directorioLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buscarDirectorioButon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetButon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(runButon1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(runButon))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reloadFilesButon))))
                    .addComponent(jScrollPane2)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(reloadFilesButon)
                    .addComponent(buscarDirectorioButon)
                    .addComponent(runButon)
                    .addComponent(runButon1)
                    .addComponent(jLabel1)
                    .addComponent(resetButon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(directorioLabel)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1046, 708));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void escribirLog(String txt) {
        if (this.historialTxt.getText().isEmpty()) {
            this.historialTxt.setText(txt);
        } else {
            this.historialTxt.setText(this.historialTxt.getText() + "\n" + txt);
        }
    }

    private void escribirListado(Boolean vaciar, String n) {
        if (vaciar) {
            this.encontradosTxt.setText(null);
        }
        if (this.encontradosTxt.getText().isEmpty()) {
            this.encontradosTxt.setText(n);
        } else {
            this.encontradosTxt.setText(this.encontradosTxt.getText() + "\n" + n);
        }
    }

    private void ejecutar(File carpeta) {
        try {
            //Hola
            this.recuperacion = new ArrayList<>();
            Renowned rename = new Renowned();
            for (int i = 0; i < carpeta.listFiles().length; i++) {
                if (carpeta.listFiles()[i].isDirectory()) {
                    boolean haSidoRenombrada = false;
                    File carpetaNuevaRenombrada = null;
                    if (this.archivosYCarpetasCheckBox.isSelected() || this.soloCarpetasCheckBox.isSelected()) {
                        //Si estamos aquí significa que tenemos que renombrar la carpeta
                        rename.setNombreOriginal(carpeta.listFiles()[i].getAbsolutePath());
                        //Hemos guardado el nombre original de la carpeta
                        boolean existe = false;
                        do {
                            int aleatorio = (int) (Math.random() * 999 + 1);
                            String nombreAleatorio = String.valueOf(aleatorio);
                            File nuevaCarpeta = new File(carpeta.listFiles()[i].getParent() + "\\" + nombreAleatorio);
                            if (!nuevaCarpeta.exists() || !nuevaCarpeta.isDirectory()) {
                                //La carpeta no existe y, si existe ese nombre, no es una carpeta. Podemos crearla
                                existe = false;
                                this.escribirLog("Carpeta " + carpeta.listFiles()[i].getAbsolutePath()
                                        + "\nrenombrada a " + nuevaCarpeta.getAbsolutePath() + "\n");
                                haSidoRenombrada = true;
                                carpetaNuevaRenombrada = nuevaCarpeta;
                                carpeta.listFiles()[i].renameTo(nuevaCarpeta);
                                rename.nombreNuevo = nuevaCarpeta.getAbsolutePath();
                                this.recuperacion.add(rename);
                            } else {
                                //Marcamos existe como true para que continúe el bucle
                                this.escribirLog("La carpeta " + carpeta.listFiles()[i].getAbsolutePath() + " ya existe"
                                        + "\nSe generará otro nombre" + "\n");
                                haSidoRenombrada = false;
                                existe = true;
                            }
                        } while (existe);
                    }
                    if (recursivoCheckBox.isSelected()) {
                        //Si el usuario desea renombrar recursivamente nos metemos en la carpeta
                        if (haSidoRenombrada) {
                            this.ejecutar(carpetaNuevaRenombrada);
                        } else {
                            this.ejecutar(carpeta.listFiles()[i]);
                        }
                    }
                } else if (this.archivosYCarpetasCheckBox.isSelected() || this.soloArchivosCheckBox.isSelected()) {
                    //Si estamos aquí significa que tenemos que renombrar el archivo
                    //Guardamos la extensión dependiendo de la opción escogida por el usuario
                    String extension = this.getExtension(carpeta.listFiles()[i].getName());
                    //Hemos leído la extensión original. Debemos comprobar si los archivos
                    //Con esta extensión deben ser renombrados
                    if (this.filtrarExtensionCheckBox.isSelected() && !extension.equals(this.filtroExtensionTxt.getText())) {
                        //Estamos aquí porque el usuario ha marcado la opción de filtrar por extensión Y
                        //la extensión del archivo NO COINCIDE CON LA EXTENSIÓN DESEADA POR EL USUARIO
                        //paramos el bucle hasta la siguiente ejecución
                        continue;
                    }
                    if (this.cambiarExtensionACheck.isSelected()) {
                        extension = this.extensionElegidaTxt.getText();
                    }
                    boolean existe = false;
                    do {
                        int aleatorio = (int) (Math.random() * 999 + 1);
                        String nombreAleatorio = String.valueOf(aleatorio);
                        File nuevoArchivo = new File(carpeta.listFiles()[i].getParent() + "\\" + nombreAleatorio + "." + extension);
                        if (!nuevoArchivo.exists() || nuevoArchivo.isDirectory()) {
                            //El archivo no existe o es una carpeta, podemos renombrarlo
                            rename.setNombreOriginal(carpeta.listFiles()[i].getAbsolutePath());
                            //Hemos guardado el nombre original
                            existe = false;
                            this.escribirLog("Archivo " + carpeta.listFiles()[i].getAbsolutePath()
                                    + "\nrenombrado a " + nuevoArchivo.getAbsolutePath() + "\n");
                            carpeta.listFiles()[i].renameTo(nuevoArchivo);
                            rename.setNombreNuevo(nuevoArchivo.getAbsolutePath());
                            this.recuperacion.add(rename);
                        } else {
                            //El archivo existe y no es una carpeta. No podemos renombrarlo
                            existe = true;
                            this.escribirLog("El archivo " + carpeta.listFiles()[i].getAbsolutePath() + " ya existe"
                                    + "\nSe generará otro nombre" + "\n");
                        }
                    } while (existe);
                }
            }
        } catch (Exception error) {
            JOptionPane.showMessageDialog(this, "Error en ejecución\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        //Iniciamos, si procede, la generación de archivos aleatorios
        try {
            if (this.falsosAleatoriosCheckBox.isSelected()) {
                if (this.soloPrincipalAleatoriosCheckBox.isSelected()) {
                    for (int i = 0; i < this.cantidadAleatoriosSpinner.getComponentCount(); i++) {
                        boolean existe = false;
                        do {
                            File archivo = new File(this.directorioBase + "\\" + String.valueOf(Math.random() * 999 + 1));
                            existe = archivo.exists() && !archivo.isDirectory();
                            
                        } while (existe);
                    }
                } else {

                }
            }
        } catch (Exception error) {
            JOptionPane.showMessageDialog(this, "Error generando aleatorios:\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        //Iniciamos, si procede, el guardado del archivo de recuperación
        try {
            if (this.generarArchivoRecuperacionCheckBox.isSelected()) {
                FileOutputStream fos = new FileOutputStream(this.directorioRecuperacionTxt.getText() + "\\" + this.nombreRecuepracionTxt.getText()
                        + ".rff");
                ObjectOutputStream salida = new ObjectOutputStream(fos);
                salida.writeObject(this.recuperacion);
            }
        } catch (Exception error) {
            JOptionPane.showMessageDialog(this, "Error en ejecución: recovery\n" + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buscarDirectorioButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarDirectorioButonActionPerformed
        // TODO add your handling code here:
        JFileChooser buscador = new JFileChooser();
        buscador.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int selection = buscador.showOpenDialog(this);

        if (selection == JFileChooser.APPROVE_OPTION) {
            this.carpeta = buscador.getSelectedFile();
            this.directorioBase = this.carpeta.getAbsolutePath();
            this.escribirLog("Directorio seleccionado:\n" + this.directorioBase + "\n");
            this.directorioLabel.setText(this.directorioBase);
            //System.out.println(arch.isDirectory());
            //System.out.println(arch.getAbsolutePath());
            this.listaArchivos = this.carpeta.listFiles();
            for (int i = 0; i < this.listaArchivos.length; i++) {
                if (i == 0) {
                    this.escribirListado(true, this.listaArchivos[i].getName());
                } else {
                    this.escribirListado(false, this.listaArchivos[i].getName());
                }
            }
        }
    }//GEN-LAST:event_buscarDirectorioButonActionPerformed

    private void runButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButonActionPerformed
        // TODO add your handling code here:
        this.ejecutar(this.carpeta);
    }//GEN-LAST:event_runButonActionPerformed

    private void runButon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButon1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_runButon1ActionPerformed

    private void reloadFilesButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadFilesButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reloadFilesButonActionPerformed

    private void resetButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resetButonActionPerformed

    private void recursivoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recursivoCheckBoxActionPerformed
        // TODO add your handling code here:
        if (this.recursivoCheckBox.isSelected()) {
            if (this.falsosAleatoriosCheckBox.isSelected()) {
                this.enTodosDirectoriosCheckBox.setEnabled(true);
            }
        } else {
            this.enTodosDirectoriosCheckBox.setEnabled(false);
            //this.enTodosDirectoriosCheckBox.setSelected(false);
            this.soloPrincipalAleatoriosCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_recursivoCheckBoxActionPerformed

    private void cambiarExtensionACheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarExtensionACheckActionPerformed
        // TODO add your handling code here:
        if (this.cambiarExtensionACheck.isSelected()) {
            this.extensionElegidaTxt.setEnabled(true);
        } else {
            this.extensionElegidaTxt.setEnabled(false);
        }
    }//GEN-LAST:event_cambiarExtensionACheckActionPerformed

    private void mantenerExtensionesCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mantenerExtensionesCheckActionPerformed
        // TODO add your handling code here:
        if (this.cambiarExtensionACheck.isSelected()) {
            this.extensionElegidaTxt.setEnabled(true);
        } else {
            this.extensionElegidaTxt.setEnabled(false);
        }
    }//GEN-LAST:event_mantenerExtensionesCheckActionPerformed

    private void filtrarExtensionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarExtensionCheckBoxActionPerformed
        // TODO add your handling code here:
        if (this.filtrarExtensionCheckBox.isSelected()) {
            this.filtroExtensionTxt.setEnabled(true);
        } else {
            this.filtroExtensionTxt.setEnabled(false);
        }
    }//GEN-LAST:event_filtrarExtensionCheckBoxActionPerformed

    private void generarArchivoRecuperacionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarArchivoRecuperacionCheckBoxActionPerformed
        // TODO add your handling code here:
        if (this.generarArchivoRecuperacionCheckBox.isSelected()) {
            this.directorioRecuperacionTxt.setEnabled(true);
            this.recuperacionIgualQueOrigenButon.setEnabled(true);
            this.buscarRecuperacionButon.setEnabled(true);
            this.nombreRecuperacionLabel.setEnabled(true);
            this.nombreRecuepracionTxt.setEnabled(true);
            this.extensinoRecuperacionLabel.setEnabled(true);
            if (this.carpeta != null && this.directorioRecuperacionTxt.getText().equals("Directorio")) {
                //Si estamos aquí es porque existe una carpeta seleccionada por el usuario y el cuadro del directorio
                //de recuperación no ha sido modificado. Por tanto, el checkbox de igual que origen estará marcado y de
                //bemos modificar el TXT
                this.directorioRecuperacionTxt.setText(this.carpeta.getAbsolutePath());
                this.escribirLog("Directorio por defecto seleccionado para archivo de recuperación:\n" + this.directorioRecuperacionTxt.getText() + "\n");
            }
        } else {
            this.directorioRecuperacionTxt.setEnabled(false);
            this.recuperacionIgualQueOrigenButon.setEnabled(false);
            this.buscarRecuperacionButon.setEnabled(false);
            this.nombreRecuperacionLabel.setEnabled(false);
            this.nombreRecuepracionTxt.setEnabled(false);
            this.extensinoRecuperacionLabel.setEnabled(false);
        }
    }//GEN-LAST:event_generarArchivoRecuperacionCheckBoxActionPerformed

    private void falsosAleatoriosCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_falsosAleatoriosCheckBoxActionPerformed
        // TODO add your handling code here:
        if (this.falsosAleatoriosCheckBox.isSelected()) {
            this.cantidadAleatoriosLabel.setEnabled(true);
            this.cantidadAleatoriosSpinner.setEnabled(true);
            this.extensionAleatoriosLabel.setEnabled(true);
            this.extensionAleatoriosTxt.setEnabled(true);
            this.soloPrincipalAleatoriosCheckBox.setEnabled(true);
            if (this.recursivoCheckBox.isSelected()) {
                this.enTodosDirectoriosCheckBox.setEnabled(true);
            }
        } else {
            this.cantidadAleatoriosLabel.setEnabled(false);
            this.cantidadAleatoriosSpinner.setEnabled(false);
            this.extensionAleatoriosLabel.setEnabled(false);
            this.extensionAleatoriosTxt.setEnabled(false);
            this.soloPrincipalAleatoriosCheckBox.setEnabled(false);
            this.enTodosDirectoriosCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_falsosAleatoriosCheckBoxActionPerformed

    private void recuperacionIgualQueOrigenButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recuperacionIgualQueOrigenButonActionPerformed
        // TODO add your handling code here:
        if (this.carpeta != null) {
            this.directorioRecuperacionTxt.setText(this.carpeta.getAbsolutePath());
            this.escribirLog("Directorio seleccionado para archivo de recuperación: DIRECTORIO BASE\n" + this.directorioRecuperacionTxt.getText() + "\n");
        } else {
            JOptionPane.showMessageDialog(this, "Debe elegir un directorio base", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_recuperacionIgualQueOrigenButonActionPerformed

    private void buscarRecuperacionButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarRecuperacionButonActionPerformed
        // TODO add your handling code here:
        JFileChooser buscador = new JFileChooser();
        buscador.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int selection = buscador.showOpenDialog(this);

        if (selection == JFileChooser.APPROVE_OPTION) {
            File carpetaSeleccionada = buscador.getSelectedFile();
            this.escribirLog("Directorio seleccionado para archivo de recuperación:\n" + carpetaSeleccionada.getAbsolutePath() + "\n");
            this.directorioRecuperacionTxt.setText(carpetaSeleccionada.getAbsolutePath());
            //System.out.println(arch.isDirectory());
            //System.out.println(arch.getAbsolutePath());
        }
    }//GEN-LAST:event_buscarRecuperacionButonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Run.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception error) {
            System.err.println(error.getMessage());
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Run().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox archivosYCarpetasCheckBox;
    private javax.swing.JButton buscarDirectorioButon;
    private javax.swing.JButton buscarRecuperacionButon;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox cambiarExtensionACheck;
    private javax.swing.JLabel cantidadAleatoriosLabel;
    private javax.swing.JSpinner cantidadAleatoriosSpinner;
    private javax.swing.JLabel directorioLabel;
    private javax.swing.JTextField directorioRecuperacionTxt;
    private javax.swing.JCheckBox enTodosDirectoriosCheckBox;
    private javax.swing.JTextArea encontradosTxt;
    private javax.swing.JLabel extensinoRecuperacionLabel;
    private javax.swing.JLabel extensionAleatoriosLabel;
    private javax.swing.JTextField extensionAleatoriosTxt;
    private javax.swing.JTextField extensionElegidaTxt;
    private javax.swing.JCheckBox falsosAleatoriosCheckBox;
    private javax.swing.JCheckBox filtrarExtensionCheckBox;
    private javax.swing.JTextField filtroExtensionTxt;
    private javax.swing.JCheckBox generarArchivoRecuperacionCheckBox;
    private javax.swing.JTextArea historialTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox mantenerExtensionesCheck;
    private javax.swing.JTextField nombreRecuepracionTxt;
    private javax.swing.JLabel nombreRecuperacionLabel;
    private javax.swing.JButton recuperacionIgualQueOrigenButon;
    private javax.swing.JCheckBox recursivoCheckBox;
    private javax.swing.JButton reloadFilesButon;
    private javax.swing.JButton resetButon;
    private javax.swing.JButton runButon;
    private javax.swing.JButton runButon1;
    private javax.swing.JCheckBox soloArchivosCheckBox;
    private javax.swing.JCheckBox soloCarpetasCheckBox;
    private javax.swing.JCheckBox soloPrincipalAleatoriosCheckBox;
    // End of variables declaration//GEN-END:variables
}
